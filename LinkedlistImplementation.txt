#include <iostream>
using namespace std;

// Node structure for sparse matrix
struct Node {
    int row;
    int col;
    int value;
    Node* next;
};

// Class for Sparse Matrix
class SparseMatrix {
public:
    Node* head;  // pointer to the head node

    // Constructor
    SparseMatrix() : head(nullptr) {}

    // Destructor
    ~SparseMatrix() {
        Node* current = head;
        while (current != nullptr) {
            Node* next = current->next;
            delete current;
            current = next;
        }
        head = nullptr;
    }

    // Function to insert a new node
    void insert(int r, int c, int val) {
        Node* newNode = new Node{r, c, val, nullptr};

        // If the list is empty, make the new node the head
        if (head == nullptr) {
            head = newNode;
            return;
        }

        // Insert at the end of the list
        Node* current = head;
        while (current->next != nullptr) {
            current = current->next;
        }
        current->next = newNode;
    }

    // Function to display the matrix
    void display() {
        Node* current = head;
        while (current != nullptr) {
            cout << "Row: " << current->row << ", Column: " << current->col << ", Value: " << current->value << endl;
            current = current->next;
        }
    }
};

// Main function to test the SparseMatrix class
int main() {
    SparseMatrix matrix;
    matrix.insert(0, 1, 5);
    matrix.insert(1, 3, 10);
    matrix.insert(2, 2, 8);

    matrix.display();
    return 0;
}
